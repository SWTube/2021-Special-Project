#-------------------------------------------------------------------
# This file is part of the CMake build system for CAVE ENGINE
#
# The contents of this file are placed in the public domain. Feel
# free to make use of it in any way you like.
#-------------------------------------------------------------------

######################################################################
# CAVE ENGINE BUILD SYSTEM
# Welcome to the CMake build system for CAVE ENGINE.
# This is the main file where we prepare the general build environment
# and provide build configuration options.
######################################################################

cmake_minimum_required(VERSION 3.8)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

set(CMAKE_C_STANDARD 11)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_C_EXTENSIONS OFF)

project(CAVE_ENGINE VERSION 0.0.1)

# extra version info
set(CAVE_ENGINE_VERSION_SUFFIX "")
set(CAVE_ENGINE_VERSION_NAME "Slave")

# legacy defines
set(CAVE_ENGINE_SOVERSION ${CAVE_ENGINE_VERSION})
set(CAVE_ENGINE_VERSION_DASH_SEPARATED "${CAVE_ENGINE_VERSION_MAJOR}-${CAVE_ENGINE_VERSION_MINOR}-${CAVE_ENGINE_VERSION_PATCH}")

message(STATUS "CMAKE_BINARY_DIR: ${CMAKE_BINARY_DIR}")
# message(STATUS "CMAKE_CACHE_MAJOR_VERSION: ${CMAKE_CACHE_MAJOR_VERSION}")
# message(STATUS "CMAKE_CACHE_MINOR_VERSION: ${CMAKE_CACHE_MINOR_VERSION}")
# message(STATUS "CMAKE_CACHE_PATCH_VERSION: ${CMAKE_CACHE_PATCH_VERSION}")
# message(STATUS "CMAKE_CACHEFILE_DIR: ${CMAKE_CACHEFILE_DIR}")
message(STATUS "CMAKE_CURRENT_BINARY_DIR: ${CMAKE_CURRENT_BINARY_DIR}")
message(STATUS "CMAKE_CURRENT_SOURCE_DIR: ${CMAKE_CURRENT_SOURCE_DIR}")
# message(STATUS "CMAKE_DEBUG_TARGET_PROPERTIES: ${CMAKE_DEBUG_TARGET_PROPERTIES}")
# message(STATUS "CMAKE_DIRECTORY_LABELS: ${CMAKE_DIRECTORY_LABELS}")
# message(STATUS "CMAKE_DL_LIBS: ${CMAKE_DL_LIBS}")
# message(STATUS "CMAKE_MAJOR_VERSION: ${CMAKE_MAJOR_VERSION}")
# message(STATUS "CMAKE_MATCH_COUNT: ${CMAKE_MATCH_COUNT}")
# message(STATUS "CMAKE_MATCH_0: ${CMAKE_MATCH_0}")
# message(STATUS "CMAKE_MINIMUM_REQUIRED_VERSION: ${CMAKE_MINIMUM_REQUIRED_VERSION}")
# message(STATUS "CMAKE_MINOR_VERSION: ${CMAKE_MINOR_VERSION}")
# message(STATUS "CMAKE_PATCH_VERSION: ${CMAKE_PATCH_VERSION}")
# message(STATUS "CMAKE_PROJECT_NAME: ${CMAKE_PROJECT_NAME}")
# message(STATUS "CMAKE_PROJECT_VERSION: ${CMAKE_PROJECT_VERSION}")
# message(STATUS "CMAKE_PROJECT_VERSION_MAJOR: ${CMAKE_PROJECT_VERSION_MAJOR}")
# message(STATUS "CMAKE_PROJECT_VERSION_MINOR: ${CMAKE_PROJECT_VERSION_MINOR}")
# message(STATUS "CMAKE_PROJECT_VERSION_PATCH: ${CMAKE_PROJECT_VERSION_PATCH}")
# message(STATUS "CMAKE_SHARED_LIBRARY_PREFIX: ${CMAKE_SHARED_LIBRARY_PREFIX}")
# message(STATUS "CMAKE_SHARED_LIBRARY_SUFFIX: ${CMAKE_SHARED_LIBRARY_SUFFIX}")
# message(STATUS "CMAKE_SHARED_MODULE_PREFIX: ${CMAKE_SHARED_MODULE_PREFIX}")
# message(STATUS "CMAKE_SHARED_MODULE_SUFFIX: ${CMAKE_SHARED_MODULE_SUFFIX}")
# message(STATUS "CMAKE_SIZEOF_VOID_P: ${CMAKE_SIZEOF_VOID_P}")
# message(STATUS "CMAKE_SOURCE_DIR: ${CMAKE_SOURCE_DIR}")
# message(STATUS "CMAKE_STATIC_LIBRARY_PREFIX: ${CMAKE_STATIC_LIBRARY_PREFIX}")
# message(STATUS "CMAKE_STATIC_LIBRARY_SUFFIX: ${CMAKE_STATIC_LIBRARY_SUFFIX}")
# message(STATUS "CMAKE_TWEAK_VERSION: ${CMAKE_TWEAK_VERSION}")
# message(STATUS "CMAKE_VERBOSE_MAKEFILE: ${CMAKE_VERBOSE_MAKEFILE}")
# message(STATUS "CMAKE_VS_DEVENV_COMMAND: ${CMAKE_VS_DEVENV_COMMAND}")
# message(STATUS "CMAKE_VS_MSBUILD_COMMAND: ${CMAKE_VS_MSBUILD_COMMAND}")
# message(STATUS "CMAKE_VS_NsightTegra_VERSION: ${CMAKE_VS_NsightTegra_VERSION}")
# message(STATUS "CMAKE_VS_PLATFORM_NAME: ${CMAKE_VS_PLATFORM_NAME}")
# message(STATUS "CMAKE_VS_PLATFORM_NAME_DEFAULT: ${CMAKE_VS_PLATFORM_NAME_DEFAULT}")
# message(STATUS "CMAKE_VS_PLATFORM_TOOLSET: ${CMAKE_VS_PLATFORM_TOOLSET}")
# message(STATUS "CMAKE_VS_PLATFORM_TOOLSET_CUDA: ${CMAKE_VS_PLATFORM_TOOLSET_CUDA}")
# message(STATUS "CMAKE_VS_PLATFORM_TOOLSET_CUDA_CUSTOM_DIR: ${CMAKE_VS_PLATFORM_TOOLSET_CUDA_CUSTOM_DIR}")
# message(STATUS "CMAKE_VS_PLATFORM_TOOLSET_HOST_ARCHITECTURE: ${CMAKE_VS_PLATFORM_TOOLSET_HOST_ARCHITECTURE}")
# message(STATUS "CMAKE_VS_PLATFORM_TOOLSET_VERSION: ${CMAKE_VS_PLATFORM_TOOLSET_VERSION}")
# message(STATUS "CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION: ${CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION}")
# message(STATUS "CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION_MAXIMUM: ${CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION_MAXIMUM}")
# message(STATUS "CAVE_ENGINE_BINARY_DIR: ${CAVE_ENGINE_BINARY_DIR}")
# set(CAVE_ENGINE_DESCRIPTION "2d Open Source C++ Game Engine developed by SWTube")
# message(STATUS "CAVE_ENGINE_DESCRIPTION: ${CAVE_ENGINE_DESCRIPTION}")
# set(CAVE_ENGINE_HOMEPAGE_URL "https://github.com/SWTube/Darkest-Cave")
# message(STATUS "CAVE_ENGINE_HOMEPAGE_URL: ${CAVE_ENGINE_HOMEPAGE_URL}")
# message(STATUS "CAVE_ENGINE_SOURCE_DIR: ${CAVE_ENGINE_SOURCE_DIR}")
# message(STATUS "CAVE_ENGINE_VERSION: ${CAVE_ENGINE_VERSION}")
# message(STATUS "CAVE_ENGINE_VERSION_MAJOR: ${CAVE_ENGINE_VERSION_MAJOR}")
# message(STATUS "CAVE_ENGINE_VERSION_MINOR: ${CAVE_ENGINE_VERSION_MINOR}")
# message(STATUS "CAVE_ENGINE_VERSION_PATCH: ${CAVE_ENGINE_VERSION_PATCH}")
# message(STATUS "CAVE_ENGINE_VERSION_TWEAK: ${CAVE_ENGINE_VERSION_TWEAK}")
message(STATUS "PROJECT_BINARY_DIR: ${PROJECT_BINARY_DIR}")
# set(PROJECT_DESCRIPTION "2d Open Source C++ Game Engine developed by SWTube")
# message(STATUS "PROJECT_DESCRIPTION: ${PROJECT_DESCRIPTION}")
# set(PROJECT_HOMEPAGE_URL "https://github.com/SWTube/Darkest-Cave")
# message(STATUS "PROJECT_HOMEPAGE_URL: ${PROJECT_HOMEPAGE_URL}")
# message(STATUS "PROJECT_NAME: ${PROJECT_NAME}")
message(STATUS "PROJECT_SOURCE_DIR: ${PROJECT_SOURCE_DIR}")
# message(STATUS "PROJECT_VERSION: ${PROJECT_VERSION}")
# message(STATUS "PROJECT_VERSION_MAJOR: ${PROJECT_VERSION_MAJOR}")
# message(STATUS "PROJECT_VERSION_MINOR: ${PROJECT_VERSION_MINOR}")
# message(STATUS "PROJECT_VERSION_PATCH: ${PROJECT_VERSION_PATCH}")
# message(STATUS "PROJECT_VERSION_TWEA: ${PROJECT_VERSION_TWEA}")

# message(STATUS "BUILD_SHARED_LIBS: ${BUILD_SHARED_LIBS}")
# message(STATUS "CMAKE_ABSOLUTE_DESTINATION_FILES: ${CMAKE_ABSOLUTE_DESTINATION_FILES}")
# message(STATUS "CMAKE_APPBUNDLE_PATH: ${CMAKE_APPBUNDLE_PATH}")
# message(STATUS "CMAKE_AUTOMOC_RELAXED_MODE: ${CMAKE_AUTOMOC_RELAXED_MODE}")
# message(STATUS "CMAKE_BACKWARDS_COMPATIBILITY: ${CMAKE_BACKWARDS_COMPATIBILITY}")
message(STATUS "CMAKE_BUILD_TYPE: ${CMAKE_BUILD_TYPE}")
# message(STATUS "CMAKE_CLANG_VFS_OVERLAY: ${CMAKE_CLANG_VFS_OVERLAY}")
# message(STATUS "CMAKE_CODEBLOCKS_COMPILER_ID: ${CMAKE_CODEBLOCKS_COMPILER_ID}")
# message(STATUS "CMAKE_CODEBLOCKS_EXCLUDE_EXTERNAL_FILES: ${CMAKE_CODEBLOCKS_EXCLUDE_EXTERNAL_FILES}")
# message(STATUS "CMAKE_CODELITE_USE_TARGETS: ${CMAKE_CODELITE_USE_TARGETS}")
# message(STATUS "CMAKE_COLOR_MAKEFILE: ${CMAKE_COLOR_MAKEFILE}")
# message(STATUS "CMAKE_CONFIGURATION_TYPES: ${CMAKE_CONFIGURATION_TYPES}")
# message(STATUS "CMAKE_DEPENDS_IN_PROJECT_ONLY: ${CMAKE_DEPENDS_IN_PROJECT_ONLY}")
# message(STATUS "CMAKE_ECLIPSE_GENERATE_LINKED_RESOURCES: ${CMAKE_ECLIPSE_GENERATE_LINKED_RESOURCES}")
# message(STATUS "CMAKE_ECLIPSE_GENERATE_SOURCE_PROJECT: ${CMAKE_ECLIPSE_GENERATE_SOURCE_PROJECT}")
# message(STATUS "CMAKE_ECLIPSE_MAKE_ARGUMENTS: ${CMAKE_ECLIPSE_MAKE_ARGUMENTS}")
# message(STATUS "CMAKE_ECLIPSE_RESOURCE_ENCODING: ${CMAKE_ECLIPSE_RESOURCE_ENCODING}")
# message(STATUS "CMAKE_ECLIPSE_VERSION: ${CMAKE_ECLIPSE_VERSION}")
# message(STATUS "CMAKE_ERROR_DEPRECATED: ${CMAKE_ERROR_DEPRECATED}")
# message(STATUS "CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION: ${CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION}")
# message(STATUS "CMAKE_EXECUTE_PROCESS_COMMAND_ECHO: ${CMAKE_EXECUTE_PROCESS_COMMAND_ECHO}")
# message(STATUS "CMAKE_EXPORT_COMPILE_COMMANDS: ${CMAKE_EXPORT_COMPILE_COMMANDS}")
# message(STATUS "CMAKE_EXPORT_PACKAGE_REGISTRY: ${CMAKE_EXPORT_PACKAGE_REGISTRY}")
# message(STATUS "CMAKE_EXPORT_NO_PACKAGE_REGISTRY: ${CMAKE_EXPORT_NO_PACKAGE_REGISTRY}")
# message(STATUS "CMAKE_FIND_APPBUNDLE: ${CMAKE_FIND_APPBUNDLE}")
# message(STATUS "CMAKE_FIND_FRAMEWORK: ${CMAKE_FIND_FRAMEWORK}")
# message(STATUS "CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX: ${CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX}")
# message(STATUS "CMAKE_FIND_LIBRARY_PREFIXES: ${CMAKE_FIND_LIBRARY_PREFIXES}")
# message(STATUS "CMAKE_FIND_LIBRARY_SUFFIXES: ${CMAKE_FIND_LIBRARY_SUFFIXES}")
# message(STATUS "CMAKE_FIND_NO_INSTALL_PREFIX: ${CMAKE_FIND_NO_INSTALL_PREFIX}")
# message(STATUS "CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY: ${CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY}")
# message(STATUS "CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY: ${CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY}")
# message(STATUS "CMAKE_FIND_PACKAGE_PREFER_CONFIG: ${CMAKE_FIND_PACKAGE_PREFER_CONFIG}")
# message(STATUS "CMAKE_FIND_PACKAGE_RESOLVE_SYMLINKS: ${CMAKE_FIND_PACKAGE_RESOLVE_SYMLINKS}")
# message(STATUS "CMAKE_FIND_PACKAGE_WARN_NO_MODULE: ${CMAKE_FIND_PACKAGE_WARN_NO_MODULE}")
# message(STATUS "CMAKE_FIND_ROOT_PATH: ${CMAKE_FIND_ROOT_PATH}")
# message(STATUS "CMAKE_FIND_ROOT_PATH_MODE_INCLUDE: ${CMAKE_FIND_ROOT_PATH_MODE_INCLUDE}")
# message(STATUS "CMAKE_FIND_ROOT_PATH_MODE_LIBRARY: ${CMAKE_FIND_ROOT_PATH_MODE_LIBRARY}")
# message(STATUS "CMAKE_FIND_ROOT_PATH_MODE_PACKAGE: ${CMAKE_FIND_ROOT_PATH_MODE_PACKAGE}")
# message(STATUS "CMAKE_FIND_ROOT_PATH_MODE_PROGRAM: ${CMAKE_FIND_ROOT_PATH_MODE_PROGRAM}")
# message(STATUS "CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH: ${CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH}")
# message(STATUS "CMAKE_FIND_USE_CMAKE_PATH: ${CMAKE_FIND_USE_CMAKE_PATH}")
# message(STATUS "CMAKE_FIND_USE_CMAKE_SYSTEM_PATH: ${CMAKE_FIND_USE_CMAKE_SYSTEM_PATH}")
# message(STATUS "CMAKE_FIND_USE_PACKAGE_REGISTRY: ${CMAKE_FIND_USE_PACKAGE_REGISTRY}")
# message(STATUS "CMAKE_FIND_USE_PACKAGE_ROOT_PATH: ${CMAKE_FIND_USE_PACKAGE_ROOT_PATH}")
# message(STATUS "CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH: ${CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH}")
# message(STATUS "CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY: ${CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY}")
# message(STATUS "CMAKE_FRAMEWORK_PATH: ${CMAKE_FRAMEWORK_PATH}")
# message(STATUS "CMAKE_IGNORE_PATH: ${CMAKE_IGNORE_PATH}")
# message(STATUS "CMAKE_INCLUDE_DIRECTORIES_BEFORE: ${CMAKE_INCLUDE_DIRECTORIES_BEFORE}")
# message(STATUS "CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE: ${CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE}")
# message(STATUS "CMAKE_INCLUDE_PATH: ${CMAKE_INCLUDE_PATH}")
# message(STATUS "CMAKE_INSTALL_DEFAULT_COMPONENT_NAME: ${CMAKE_INSTALL_DEFAULT_COMPONENT_NAME}")
# message(STATUS "CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS: ${CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS}")
# message(STATUS "CMAKE_INSTALL_MESSAGE: ${CMAKE_INSTALL_MESSAGE}")
# message(STATUS "CMAKE_INSTALL_PREFIX: ${CMAKE_INSTALL_PREFIX}")
# message(STATUS "CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT: ${CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT}")
# message(STATUS "CMAKE_LIBRARY_PATH: ${CMAKE_LIBRARY_PATH}")
# message(STATUS "CMAKE_LINK_DIRECTORIES_BEFORE: ${CMAKE_LINK_DIRECTORIES_BEFORE}")
# message(STATUS "CMAKE_MFC_FLAG: ${CMAKE_MFC_FLAG}")
# message(STATUS "CMAKE_MAXIMUM_RECURSION_DEPTH: ${CMAKE_MAXIMUM_RECURSION_DEPTH}")
# message(STATUS "CMAKE_MESSAGE_CONTEXT: ${CMAKE_MESSAGE_CONTEXT}")
# message(STATUS "CMAKE_MESSAGE_CONTEXT_SHOW: ${CMAKE_MESSAGE_CONTEXT_SHOW}")
# message(STATUS "CMAKE_MESSAGE_INDENT: ${CMAKE_MESSAGE_INDENT}")
# message(STATUS "CMAKE_MESSAGE_LOG_LEVEL: ${CMAKE_MESSAGE_LOG_LEVEL}")
# message(STATUS "CMAKE_MODULE_PATH: ${CMAKE_MODULE_PATH}")
# message(STATUS "CMAKE_POLICY_DEFAULT_CMP0000: ${CMAKE_POLICY_DEFAULT_CMP0000}")
# message(STATUS "CMAKE_POLICY_WARNING_CMP0000: ${CMAKE_POLICY_WARNING_CMP0000}")
# message(STATUS "CMAKE_PREFIX_PATH: ${CMAKE_PREFIX_PATH}")
# message(STATUS "CMAKE_PROGRAM_PATH: ${CMAKE_PROGRAM_PATH}")
# message(STATUS "CMAKE_PROJECT_INCLUDE: ${CMAKE_PROJECT_INCLUDE}")
# message(STATUS "CMAKE_PROJECT_INCLUDE_BEFORE: ${CMAKE_PROJECT_INCLUDE_BEFORE}")
# message(STATUS "CMAKE_PROJECT_CAVE_ENGINE_INCLUDE: ${CMAKE_PROJECT_CAVE_ENGINE_INCLUDE}")
# message(STATUS "CMAKE_PROJECT_CAVE_ENGINE_INCLUDE_BEFORE: ${CMAKE_PROJECT_CAVE_ENGINE_INCLUDE_BEFORE}")
# message(STATUS "CMAKE_SKIP_INSTALL_ALL_DEPENDENCY: ${CMAKE_SKIP_INSTALL_ALL_DEPENDENCY}")
# message(STATUS "CMAKE_STAGING_PREFIX: ${CMAKE_STAGING_PREFIX}")
# message(STATUS "CMAKE_SUBLIME_TEXT_2_ENV_SETTINGS: ${CMAKE_SUBLIME_TEXT_2_ENV_SETTINGS}")
# message(STATUS "CMAKE_SUBLIME_TEXT_2_EXCLUDE_BUILD_TREE: ${CMAKE_SUBLIME_TEXT_2_EXCLUDE_BUILD_TREE}")
# message(STATUS "CMAKE_SUPPRESS_REGENERATION: ${CMAKE_SUPPRESS_REGENERATION}")
# message(STATUS "CMAKE_SYSROOT: ${CMAKE_SYSROOT}")
# message(STATUS "CMAKE_SYSROOT_COMPILE: ${CMAKE_SYSROOT_COMPILE}")
# message(STATUS "CMAKE_SYSROOT_LINK: ${CMAKE_SYSROOT_LINK}")
# message(STATUS "CMAKE_SYSTEM_APPBUNDLE_PATH: ${CMAKE_SYSTEM_APPBUNDLE_PATH}")
# message(STATUS "CMAKE_SYSTEM_FRAMEWORK_PATH: ${CMAKE_SYSTEM_FRAMEWORK_PATH}")
# message(STATUS "CMAKE_SYSTEM_IGNORE_PATH: ${CMAKE_SYSTEM_IGNORE_PATH}")
# message(STATUS "CMAKE_SYSTEM_INCLUDE_PATH: ${CMAKE_SYSTEM_INCLUDE_PATH}")
# message(STATUS "CMAKE_SYSTEM_LIBRARY_PATH: ${CMAKE_SYSTEM_LIBRARY_PATH}")
# message(STATUS "CMAKE_SYSTEM_PREFIX_PATH: ${CMAKE_SYSTEM_PREFIX_PATH}")
# message(STATUS "CMAKE_SYSTEM_PROGRAM_PATH: ${CMAKE_SYSTEM_PROGRAM_PATH}")
# message(STATUS "CMAKE_USER_MAKE_RULES_OVERRIDE: ${CMAKE_USER_MAKE_RULES_OVERRIDE}")
# message(STATUS "CMAKE_WARN_DEPRECATED: ${CMAKE_WARN_DEPRECATED}")
# message(STATUS "CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION: ${CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION}")
# message(STATUS "CMAKE_XCODE_GENERATE_SCHEME: ${CMAKE_XCODE_GENERATE_SCHEME}")
# message(STATUS "CMAKE_XCODE_GENERATE_TOP_LEVEL_PROJECT_ONLY: ${CMAKE_XCODE_GENERATE_TOP_LEVEL_PROJECT_ONLY}")
# message(STATUS "CMAKE_XCODE_LINK_BUILD_PHASE_MODE: ${CMAKE_XCODE_LINK_BUILD_PHASE_MODE}")
# message(STATUS "CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER: ${CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER}")
# message(STATUS "CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN: ${CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN}")
# message(STATUS "CMAKE_XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING: ${CMAKE_XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING}")
# message(STATUS "CMAKE_XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER: ${CMAKE_XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER}")
# message(STATUS "CMAKE_XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS: ${CMAKE_XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS}")
# message(STATUS "CMAKE_XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE: ${CMAKE_XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE}")
# message(STATUS "CMAKE_XCODE_SCHEME_ENVIRONMENT: ${CMAKE_XCODE_SCHEME_ENVIRONMENT}")
# message(STATUS "CMAKE_XCODE_SCHEME_GUARD_MALLOC: ${CMAKE_XCODE_SCHEME_GUARD_MALLOC}")
# message(STATUS "CMAKE_XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP: ${CMAKE_XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP}")
# message(STATUS "CMAKE_XCODE_SCHEME_MALLOC_GUARD_EDGES: ${CMAKE_XCODE_SCHEME_MALLOC_GUARD_EDGES}")
# message(STATUS "CMAKE_XCODE_SCHEME_MALLOC_SCRIBBLE: ${CMAKE_XCODE_SCHEME_MALLOC_SCRIBBLE}")
# message(STATUS "CMAKE_XCODE_SCHEME_MALLOC_STACK: ${CMAKE_XCODE_SCHEME_MALLOC_STACK}")
# message(STATUS "CMAKE_XCODE_SCHEME_THREAD_SANITIZER: ${CMAKE_XCODE_SCHEME_THREAD_SANITIZER}")
# message(STATUS "CMAKE_XCODE_SCHEME_THREAD_SANITIZER_STOP: ${CMAKE_XCODE_SCHEME_THREAD_SANITIZER_STOP}")
# message(STATUS "CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER: ${CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER}")
# message(STATUS "CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP: ${CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP}")
# message(STATUS "CMAKE_XCODE_SCHEME_WORKING_DIRECTORY: ${CMAKE_XCODE_SCHEME_WORKING_DIRECTORY}")
# message(STATUS "CMAKE_XCODE_SCHEME_ZOMBIE_OBJECTS: ${CMAKE_XCODE_SCHEME_ZOMBIE_OBJECTS}")

# message(STATUS "APPLE: ${APPLE}")
# message(STATUS "CMAKE_CL_64: ${CMAKE_CL_64}")
# message(STATUS "CMAKE_COMPILER_2005: ${CMAKE_COMPILER_2005}")
# message(STATUS "CMAKE_HOST_APPLE: ${CMAKE_HOST_APPLE}")
# message(STATUS "CMAKE_HOST_SOLARIS: ${CMAKE_HOST_SOLARIS}")
# message(STATUS "CMAKE_HOST_SYSTEM: ${CMAKE_HOST_SYSTEM}")
# message(STATUS "CMAKE_HOST_SYSTEM_NAME: ${CMAKE_HOST_SYSTEM_NAME}")
# message(STATUS "CMAKE_HOST_SYSTEM_PROCESSOR: ${CMAKE_HOST_SYSTEM_PROCESSOR}")
# message(STATUS "CMAKE_HOST_SYSTEM_VERSION: ${CMAKE_HOST_SYSTEM_VERSION}")
# message(STATUS "CMAKE_HOST_UNIX: ${CMAKE_HOST_UNIX}")
# message(STATUS "CMAKE_HOST_WIN32: ${CMAKE_HOST_WIN32}")
# message(STATUS "CMAKE_LIBRARY_ARCHITECTURE: ${CMAKE_LIBRARY_ARCHITECTURE}")
# message(STATUS "CMAKE_LIBRARY_ARCHITECTURE_REGEX: ${CMAKE_LIBRARY_ARCHITECTURE_REGEX}")
# message(STATUS "CMAKE_OBJECT_PATH_MAX: ${CMAKE_OBJECT_PATH_MAX}")
# message(STATUS "CMAKE_SYSTEM: ${CMAKE_SYSTEM}")
# message(STATUS "CMAKE_SYSTEM_NAME: ${CMAKE_SYSTEM_NAME}")
# message(STATUS "CMAKE_SYSTEM_PROCESSOR: ${CMAKE_SYSTEM_PROCESSOR}")
# message(STATUS "CMAKE_SYSTEM_VERSION: ${CMAKE_SYSTEM_VERSION}")
# message(STATUS "CYGWIN: ${CYGWIN}")
# message(STATUS "GHS-MULTI: ${GHS-MULTI}")
# message(STATUS "IOS: ${IOS}")
# message(STATUS "MINGW: ${MINGW}")
# message(STATUS "MSVC: ${MSVC}")
# message(STATUS "MSVC10: ${MSVC10}")
# message(STATUS "MSVC11: ${MSVC11}")
# message(STATUS "MSVC12: ${MSVC12}")
# message(STATUS "MSVC14: ${MSVC14}")
# message(STATUS "MSVC60: ${MSVC60}")
# message(STATUS "MSVC70: ${MSVC70}")
# message(STATUS "MSVC71: ${MSVC71}")
# message(STATUS "MSVC80: ${MSVC80}")
# message(STATUS "MSVC90: ${MSVC90}")
# message(STATUS "MSVC_IDE: ${MSVC_IDE}")
# message(STATUS "MSVC_TOOLSET_VERSION: ${MSVC_TOOLSET_VERSION}")
# message(STATUS "MSVC_VERSION: ${MSVC_VERSION}")
# message(STATUS "MSYS: ${MSYS}")
# message(STATUS "UNIX: ${UNIX}")
# message(STATUS "WIN32: ${WIN32}")
# message(STATUS "WINCE: ${WINCE}")
# message(STATUS "WINDOWS_PHONE: ${WINDOWS_PHONE}")
# message(STATUS "WINDOWS_STORE: ${WINDOWS_STORE}")
# message(STATUS "XCODE: ${XCODE}")
# message(STATUS "XCODE_VERSION: ${XCODE_VERSION}")

# message(STATUS "CMAKE_AIX_EXPORT_ALL_SYMBOLS: ${CMAKE_AIX_EXPORT_ALL_SYMBOLS}")
# message(STATUS "CMAKE_ANDROID_ANT_ADDITIONAL_OPTIONS: ${CMAKE_ANDROID_ANT_ADDITIONAL_OPTIONS}")
# message(STATUS "CMAKE_ANDROID_API: ${CMAKE_ANDROID_API}")
# message(STATUS "CMAKE_ANDROID_API_MIN: ${CMAKE_ANDROID_API_MIN}")
# message(STATUS "CMAKE_ANDROID_ARCH: ${CMAKE_ANDROID_ARCH}")
# message(STATUS "CMAKE_ANDROID_ARCH_ABI: ${CMAKE_ANDROID_ARCH_ABI}")
# message(STATUS "CMAKE_ANDROID_ARM_MODE: ${CMAKE_ANDROID_ARM_MODE}")
# message(STATUS "CMAKE_ANDROID_ARM_NEON: ${CMAKE_ANDROID_ARM_NEON}")
# message(STATUS "CMAKE_ANDROID_ASSETS_DIRECTORIES: ${CMAKE_ANDROID_ASSETS_DIRECTORIES}")
# message(STATUS "CMAKE_ANDROID_EXCEPTIONS: ${CMAKE_ANDROID_EXCEPTIONS}")
# message(STATUS "CMAKE_ANDROID_GUI: ${CMAKE_ANDROID_GUI}")
# message(STATUS "CMAKE_ANDROID_JAR_DEPENDENCIES: ${CMAKE_ANDROID_JAR_DEPENDENCIES}")
# message(STATUS "CMAKE_ANDROID_JAR_DIRECTORIES: ${CMAKE_ANDROID_JAR_DIRECTORIES}")
# message(STATUS "CMAKE_ANDROID_JAVA_SOURCE_DIR: ${CMAKE_ANDROID_JAVA_SOURCE_DIR}")
# message(STATUS "CMAKE_ANDROID_NATIVE_LIB_DEPENDENCIES: ${CMAKE_ANDROID_NATIVE_LIB_DEPENDENCIES}")
# message(STATUS "CMAKE_ANDROID_NATIVE_LIB_DIRECTORIES: ${CMAKE_ANDROID_NATIVE_LIB_DIRECTORIES}")
# message(STATUS "CMAKE_ANDROID_NDK: ${CMAKE_ANDROID_NDK}")
# message(STATUS "CMAKE_ANDROID_NDK_DEPRECATED_HEADERS: ${CMAKE_ANDROID_NDK_DEPRECATED_HEADERS}")
# message(STATUS "CMAKE_ANDROID_NDK_TOOLCHAIN_HOST_TAG: ${CMAKE_ANDROID_NDK_TOOLCHAIN_HOST_TAG}")
# message(STATUS "CMAKE_ANDROID_NDK_TOOLCHAIN_VERSION: ${CMAKE_ANDROID_NDK_TOOLCHAIN_VERSION}")
# message(STATUS "CMAKE_ANDROID_PROCESS_MAX: ${CMAKE_ANDROID_PROCESS_MAX}")
# message(STATUS "CMAKE_ANDROID_PROGUARD: ${CMAKE_ANDROID_PROGUARD}")
# message(STATUS "CMAKE_ANDROID_PROGUARD_CONFIG_PATH: ${CMAKE_ANDROID_PROGUARD_CONFIG_PATH}")
# message(STATUS "CMAKE_ANDROID_RTTI: ${CMAKE_ANDROID_RTTI}")
# message(STATUS "CMAKE_ANDROID_SECURE_PROPS_PATH: ${CMAKE_ANDROID_SECURE_PROPS_PATH}")
# message(STATUS "CMAKE_ANDROID_SKIP_ANT_STEP: ${CMAKE_ANDROID_SKIP_ANT_STEP}")
# message(STATUS "CMAKE_ANDROID_STANDALONE_TOOLCHAIN: ${CMAKE_ANDROID_STANDALONE_TOOLCHAIN}")
# message(STATUS "CMAKE_ANDROID_STL_TYPE: ${CMAKE_ANDROID_STL_TYPE}")
# message(STATUS "CMAKE_APPLE_SILICON_PROCESSOR: ${CMAKE_APPLE_SILICON_PROCESSOR}")
# message(STATUS "CMAKE_ARCHIVE_OUTPUT_DIRECTORY: ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}")
# message(STATUS "CMAKE_AUTOGEN_ORIGIN_DEPENDS: ${CMAKE_AUTOGEN_ORIGIN_DEPENDS}")
# message(STATUS "CMAKE_AUTOGEN_PARALLEL: ${CMAKE_AUTOGEN_PARALLEL}")
# message(STATUS "CMAKE_AUTOGEN_VERBOSE: ${CMAKE_AUTOGEN_VERBOSE}")
# message(STATUS "CMAKE_AUTOMOC: ${CMAKE_AUTOMOC}")
# message(STATUS "CMAKE_AUTOMOC_COMPILER_PREDEFINES: ${CMAKE_AUTOMOC_COMPILER_PREDEFINES}")
# message(STATUS "CMAKE_AUTOMOC_DEPEND_FILTERS: ${CMAKE_AUTOMOC_DEPEND_FILTERS}")
# message(STATUS "CMAKE_AUTOMOC_MACRO_NAMES: ${CMAKE_AUTOMOC_MACRO_NAMES}")
# message(STATUS "CMAKE_AUTOMOC_MOC_OPTIONS: ${CMAKE_AUTOMOC_MOC_OPTIONS}")
# message(STATUS "CMAKE_AUTOMOC_PATH_PREFIX: ${CMAKE_AUTOMOC_PATH_PREFIX}")
# message(STATUS "CMAKE_AUTORCC: ${CMAKE_AUTORCC}")
# message(STATUS "CMAKE_AUTORCC_OPTIONS: ${CMAKE_AUTORCC_OPTIONS}")
# message(STATUS "CMAKE_AUTOUIC: ${CMAKE_AUTOUIC}")
# message(STATUS "CMAKE_AUTOUIC_OPTIONS: ${CMAKE_AUTOUIC_OPTIONS}")
# message(STATUS "CMAKE_AUTOUIC_SEARCH_PATHS: ${CMAKE_AUTOUIC_SEARCH_PATHS}")
# message(STATUS "CMAKE_BUILD_RPATH: ${CMAKE_BUILD_RPATH}")
# message(STATUS "CMAKE_BUILD_RPATH_USE_ORIGIN: ${CMAKE_BUILD_RPATH_USE_ORIGIN}")
# message(STATUS "CMAKE_BUILD_WITH_INSTALL_NAME_DIR: ${CMAKE_BUILD_WITH_INSTALL_NAME_DIR}")
# message(STATUS "CMAKE_BUILD_WITH_INSTALL_RPATH: ${CMAKE_BUILD_WITH_INSTALL_RPATH}")
# message(STATUS "CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY: ${CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY}")
# message(STATUS "CMAKE_CROSS_CONFIGS: ${CMAKE_CROSS_CONFIGS}")
# message(STATUS "CMAKE_CTEST_ARGUMENTS: ${CMAKE_CTEST_ARGUMENTS}")
# message(STATUS "CMAKE_CUDA_RESOLVE_DEVICE_SYMBOLS: ${CMAKE_CUDA_RESOLVE_DEVICE_SYMBOLS}")
# message(STATUS "CMAKE_CUDA_RUNTIME_LIBRARY: ${CMAKE_CUDA_RUNTIME_LIBRARY}")
# message(STATUS "CMAKE_CUDA_SEPARABLE_COMPILATION: ${CMAKE_CUDA_SEPARABLE_COMPILATION}")
# message(STATUS "CMAKE_DEBUG_POSTFIX: ${CMAKE_DEBUG_POSTFIX}")
# message(STATUS "CMAKE_DEFAULT_BUILD_TYPE: ${CMAKE_DEFAULT_BUILD_TYPE}")
# message(STATUS "CMAKE_DEFAULT_CONFIGS: ${CMAKE_DEFAULT_CONFIGS}")
# message(STATUS "CMAKE_DISABLE_PRECOMPILE_HEADERS: ${CMAKE_DISABLE_PRECOMPILE_HEADERS}")
# message(STATUS "CMAKE_DEPENDS_USE_COMPILER: ${CMAKE_DEPENDS_USE_COMPILER}")
# message(STATUS "CMAKE_ENABLE_EXPORTS: ${CMAKE_ENABLE_EXPORTS}")
# message(STATUS "CMAKE_EXE_LINKER_FLAGS: ${CMAKE_EXE_LINKER_FLAGS}")
# message(STATUS "CMAKE_EXE_LINKER_FLAGS_INIT: ${CMAKE_EXE_LINKER_FLAGS_INIT}")
# message(STATUS "CMAKE_FOLDER: ${CMAKE_FOLDER}")
# message(STATUS "CMAKE_FRAMEWORK: ${CMAKE_FRAMEWORK}")
# message(STATUS "CMAKE_Fortran_FORMAT: ${CMAKE_Fortran_FORMAT}")
# message(STATUS "CMAKE_Fortran_MODULE_DIRECTORY: ${CMAKE_Fortran_MODULE_DIRECTORY}")
# message(STATUS "CMAKE_Fortran_PREPROCESS: ${CMAKE_Fortran_PREPROCESS}")
# message(STATUS "CMAKE_GHS_NO_SOURCE_GROUP_FILE: ${CMAKE_GHS_NO_SOURCE_GROUP_FILE}")
# message(STATUS "CMAKE_GLOBAL_AUTOGEN_TARGET: ${CMAKE_GLOBAL_AUTOGEN_TARGET}")
# message(STATUS "CMAKE_GLOBAL_AUTOGEN_TARGET_NAME: ${CMAKE_GLOBAL_AUTOGEN_TARGET_NAME}")
# message(STATUS "CMAKE_GLOBAL_AUTORCC_TARGET: ${CMAKE_GLOBAL_AUTORCC_TARGET}")
# message(STATUS "CMAKE_GLOBAL_AUTORCC_TARGET_NAME: ${CMAKE_GLOBAL_AUTORCC_TARGET_NAME}")
# message(STATUS "CMAKE_GNUtoMS: ${CMAKE_GNUtoMS}")
# message(STATUS "CMAKE_INCLUDE_CURRENT_DIR: ${CMAKE_INCLUDE_CURRENT_DIR}")
# message(STATUS "CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE: ${CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE}")
# message(STATUS "CMAKE_INSTALL_NAME_DIR: ${CMAKE_INSTALL_NAME_DIR}")
# message(STATUS "CMAKE_INSTALL_REMOVE_ENVIRONMENT_RPATH: ${CMAKE_INSTALL_REMOVE_ENVIRONMENT_RPATH}")
# message(STATUS "CMAKE_INSTALL_RPATH: ${CMAKE_INSTALL_RPATH}")
# message(STATUS "CMAKE_INSTALL_RPATH_USE_LINK_PATH: ${CMAKE_INSTALL_RPATH_USE_LINK_PATH}")
# message(STATUS "CMAKE_INTERPROCEDURAL_OPTIMIZATION: ${CMAKE_INTERPROCEDURAL_OPTIMIZATION}")
# message(STATUS "CMAKE_IOS_INSTALL_COMBINED: ${CMAKE_IOS_INSTALL_COMBINED}")
# message(STATUS "CMAKE_CXX_CLANG_TIDY: ${CMAKE_CXX_CLANG_TIDY}")
# message(STATUS "CMAKE_CXX_COMPILER_LAUNCHER: ${CMAKE_CXX_COMPILER_LAUNCHER}")
# message(STATUS "CMAKE_CXX_CPPCHECK: ${CMAKE_CXX_CPPCHECK}")
# message(STATUS "CMAKE_CXX_CPPLINT: ${CMAKE_CXX_CPPLINT}")
# message(STATUS "CMAKE_CXX_INCLUDE_WHAT_YOU_USE: ${CMAKE_CXX_INCLUDE_WHAT_YOU_USE}")
# message(STATUS "CMAKE_CXX_LINK_LIBRARY_FILE_FLAG: ${CMAKE_CXX_LINK_LIBRARY_FILE_FLAG}")
# message(STATUS "CMAKE_CXX_LINK_LIBRARY_FLAG: ${CMAKE_CXX_LINK_LIBRARY_FLAG}")
# message(STATUS "CMAKE_CXX_VISIBILITY_PRESET: ${CMAKE_CXX_VISIBILITY_PRESET}")
# message(STATUS "CMAKE_LIBRARY_OUTPUT_DIRECTORY: ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}")
# message(STATUS "CMAKE_LIBRARY_PATH_FLAG: ${CMAKE_LIBRARY_PATH_FLAG}")
# message(STATUS "CMAKE_LINK_DEF_FILE_FLAG: ${CMAKE_LINK_DEF_FILE_FLAG}")
# message(STATUS "CMAKE_LINK_DEPENDS_NO_SHARED: ${CMAKE_LINK_DEPENDS_NO_SHARED}")
# message(STATUS "CMAKE_LINK_INTERFACE_LIBRARIES: ${CMAKE_LINK_INTERFACE_LIBRARIES}")
# message(STATUS "CMAKE_LINK_LIBRARY_FILE_FLAG: ${CMAKE_LINK_LIBRARY_FILE_FLAG}")
# message(STATUS "CMAKE_LINK_LIBRARY_FLAG: ${CMAKE_LINK_LIBRARY_FLAG}")
# message(STATUS "CMAKE_LINK_WHAT_YOU_USE: ${CMAKE_LINK_WHAT_YOU_USE}")
# message(STATUS "CMAKE_MACOSX_BUNDLE: ${CMAKE_MACOSX_BUNDLE}")
# message(STATUS "CMAKE_MACOSX_RPATH: ${CMAKE_MACOSX_RPATH}")
# message(STATUS "CMAKE_MODULE_LINKER_FLAGS: ${CMAKE_MODULE_LINKER_FLAGS}")
# message(STATUS "CMAKE_MODULE_LINKER_FLAGS_INIT: ${CMAKE_MODULE_LINKER_FLAGS_INIT}")
# message(STATUS "CMAKE_MSVCIDE_RUN_PATH: ${CMAKE_MSVCIDE_RUN_PATH}")
# message(STATUS "CMAKE_MSVC_RUNTIME_LIBRARY: ${CMAKE_MSVC_RUNTIME_LIBRARY}")
# message(STATUS "CMAKE_NINJA_OUTPUT_PATH_PREFIX: ${CMAKE_NINJA_OUTPUT_PATH_PREFIX}")
# message(STATUS "CMAKE_NO_BUILTIN_CHRPATH: ${CMAKE_NO_BUILTIN_CHRPATH}")
# message(STATUS "CMAKE_NO_SYSTEM_FROM_IMPORTED: ${CMAKE_NO_SYSTEM_FROM_IMPORTED}")
# message(STATUS "CMAKE_OPTIMIZE_DEPENDENCIES: ${CMAKE_OPTIMIZE_DEPENDENCIES}")
# message(STATUS "CMAKE_OSX_ARCHITECTURES: ${CMAKE_OSX_ARCHITECTURES}")
# message(STATUS "CMAKE_OSX_DEPLOYMENT_TARGET: ${CMAKE_OSX_DEPLOYMENT_TARGET}")
# message(STATUS "CMAKE_OSX_SYSROOT: ${CMAKE_OSX_SYSROOT}")
# message(STATUS "CMAKE_PCH_WARN_INVALID: ${CMAKE_PCH_WARN_INVALID}")
# message(STATUS "CMAKE_PCH_INSTANTIATE_TEMPLATES: ${CMAKE_PCH_INSTANTIATE_TEMPLATES}")
# message(STATUS "CMAKE_PDB_OUTPUT_DIRECTORY: ${CMAKE_PDB_OUTPUT_DIRECTORY}")
# message(STATUS "CMAKE_POSITION_INDEPENDENT_CODE: ${CMAKE_POSITION_INDEPENDENT_CODE}")
# message(STATUS "CMAKE_RUNTIME_OUTPUT_DIRECTORY: ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}")
# message(STATUS "CMAKE_SHARED_LINKER_FLAGS: ${CMAKE_SHARED_LINKER_FLAGS}")
# message(STATUS "CMAKE_SHARED_LINKER_FLAGS_INIT: ${CMAKE_SHARED_LINKER_FLAGS_INIT}")
# message(STATUS "CMAKE_SKIP_BUILD_RPATH: ${CMAKE_SKIP_BUILD_RPATH}")
# message(STATUS "CMAKE_SKIP_INSTALL_RPATH: ${CMAKE_SKIP_INSTALL_RPATH}")
# message(STATUS "CMAKE_STATIC_LINKER_FLAGS: ${CMAKE_STATIC_LINKER_FLAGS}")
# message(STATUS "CMAKE_STATIC_LINKER_FLAGS_INIT: ${CMAKE_STATIC_LINKER_FLAGS_INIT}")
# message(STATUS "CMAKE_TRY_COMPILE_CONFIGURATION: ${CMAKE_TRY_COMPILE_CONFIGURATION}")
# message(STATUS "CMAKE_TRY_COMPILE_PLATFORM_VARIABLES: ${CMAKE_TRY_COMPILE_PLATFORM_VARIABLES}")
# message(STATUS "CMAKE_TRY_COMPILE_TARGET_TYPE: ${CMAKE_TRY_COMPILE_TARGET_TYPE}")
# message(STATUS "CMAKE_UNITY_BUILD: ${CMAKE_UNITY_BUILD}")
# message(STATUS "CMAKE_UNITY_BUILD_BATCH_SIZE: ${CMAKE_UNITY_BUILD_BATCH_SIZE}")
# message(STATUS "CMAKE_UNITY_BUILD_UNIQUE_ID: ${CMAKE_UNITY_BUILD_UNIQUE_ID}")
# message(STATUS "CMAKE_USE_RELATIVE_PATHS: ${CMAKE_USE_RELATIVE_PATHS}")
# message(STATUS "CMAKE_VISIBILITY_INLINES_HIDDEN: ${CMAKE_VISIBILITY_INLINES_HIDDEN}")
# message(STATUS "CMAKE_VS_GLOBALS: ${CMAKE_VS_GLOBALS}")
# message(STATUS "CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD: ${CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD}")
# message(STATUS "CMAKE_VS_INCLUDE_PACKAGE_TO_DEFAULT_BUILD: ${CMAKE_VS_INCLUDE_PACKAGE_TO_DEFAULT_BUILD}")
# message(STATUS "CMAKE_VS_JUST_MY_CODE_DEBUGGING: ${CMAKE_VS_JUST_MY_CODE_DEBUGGING}")
# message(STATUS "CMAKE_VS_SDK_EXCLUDE_DIRECTORIES: ${CMAKE_VS_SDK_EXCLUDE_DIRECTORIES}")
# message(STATUS "CMAKE_VS_SDK_EXECUTABLE_DIRECTORIES: ${CMAKE_VS_SDK_EXECUTABLE_DIRECTORIES}")
# message(STATUS "CMAKE_VS_SDK_INCLUDE_DIRECTORIES: ${CMAKE_VS_SDK_INCLUDE_DIRECTORIES}")
# message(STATUS "CMAKE_VS_SDK_LIBRARY_DIRECTORIES: ${CMAKE_VS_SDK_LIBRARY_DIRECTORIES}")
# message(STATUS "CMAKE_VS_SDK_LIBRARY_WINRT_DIRECTORIES: ${CMAKE_VS_SDK_LIBRARY_WINRT_DIRECTORIES}")
# message(STATUS "CMAKE_VS_SDK_REFERENCE_DIRECTORIES: ${CMAKE_VS_SDK_REFERENCE_DIRECTORIES}")
# message(STATUS "CMAKE_VS_SDK_SOURCE_DIRECTORIES: ${CMAKE_VS_SDK_SOURCE_DIRECTORIES}")
# message(STATUS "CMAKE_VS_WINRT_BY_DEFAULT: ${CMAKE_VS_WINRT_BY_DEFAULT}")
# message(STATUS "CMAKE_WIN32_EXECUTABLE: ${CMAKE_WIN32_EXECUTABLE}")
# message(STATUS "CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS: ${CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS}")
# message(STATUS "EXECUTABLE_OUTPUT_PATH: ${EXECUTABLE_OUTPUT_PATH}")
# message(STATUS "LIBRARY_OUTPUT_PATH: ${LIBRARY_OUTPUT_PATH}")

# message(STATUS "CMAKE_COMPILER_IS_GNUCC: ${CMAKE_COMPILER_IS_GNUCC}")
# message(STATUS "CMAKE_COMPILER_IS_GNUCXX: ${CMAKE_COMPILER_IS_GNUCXX}")
# message(STATUS "CMAKE_COMPILER_IS_GNUG77: ${CMAKE_COMPILER_IS_GNUG77}")
# message(STATUS "CMAKE_CUDA_ARCHITECTURES: ${CMAKE_CUDA_ARCHITECTURES}")
# message(STATUS "CMAKE_CUDA_COMPILE_FEATURES: ${CMAKE_CUDA_COMPILE_FEATURES}")
# message(STATUS "CMAKE_CUDA_EXTENSIONS: ${CMAKE_CUDA_EXTENSIONS}")
# message(STATUS "CMAKE_CUDA_HOST_COMPILER: ${CMAKE_CUDA_HOST_COMPILER}")
# message(STATUS "CMAKE_CUDA_STANDARD: ${CMAKE_CUDA_STANDARD}")
# message(STATUS "CMAKE_CUDA_STANDARD_REQUIRED: ${CMAKE_CUDA_STANDARD_REQUIRED}")
# message(STATUS "CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES: ${CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES}")
# message(STATUS "CMAKE_CXX_COMPILE_FEATURES: ${CMAKE_CXX_COMPILE_FEATURES}")
# message(STATUS "CMAKE_CXX_EXTENSIONS: ${CMAKE_CXX_EXTENSIONS}")
# message(STATUS "CMAKE_CXX_STANDARD: ${CMAKE_CXX_STANDARD}")
# message(STATUS "CMAKE_CXX_STANDARD_REQUIRED: ${CMAKE_CXX_STANDARD_REQUIRED}")
# message(STATUS "CMAKE_C_COMPILE_FEATURES: ${CMAKE_C_COMPILE_FEATURES}")
# message(STATUS "CMAKE_C_EXTENSIONS: ${CMAKE_C_EXTENSIONS}")
# message(STATUS "CMAKE_C_STANDARD: ${CMAKE_C_STANDARD}")
# message(STATUS "CMAKE_C_STANDARD_REQUIRED: ${CMAKE_C_STANDARD_REQUIRED}")
# message(STATUS "CMAKE_ISPC_HEADER_DIRECTORY: ${CMAKE_ISPC_HEADER_DIRECTORY}")
# message(STATUS "CMAKE_ISPC_HEADER_SUFFIX: ${CMAKE_ISPC_HEADER_SUFFIX}")
# message(STATUS "CMAKE_ISPC_INSTRUCTION_SETS: ${CMAKE_ISPC_INSTRUCTION_SETS}")
# message(STATUS "CMAKE_CXX_ARCHIVE_APPEND: ${CMAKE_CXX_ARCHIVE_APPEND}")
# message(STATUS "CMAKE_CXX_ARCHIVE_CREATE: ${CMAKE_CXX_ARCHIVE_CREATE}")
# message(STATUS "CMAKE_CXX_ARCHIVE_FINISH: ${CMAKE_CXX_ARCHIVE_FINISH}")
# message(STATUS "CMAKE_CXX_BYTE_ORDER: ${CMAKE_CXX_BYTE_ORDER}")
# message(STATUS "CMAKE_CXX_COMPILER: ${CMAKE_CXX_COMPILER}")
# message(STATUS "CMAKE_CXX_COMPILER_EXTERNAL_TOOLCHAIN: ${CMAKE_CXX_COMPILER_EXTERNAL_TOOLCHAIN}")
# message(STATUS "CMAKE_CXX_COMPILER_ID: ${CMAKE_CXX_COMPILER_ID}")
# message(STATUS "CMAKE_CXX_COMPILER_LOADED: ${CMAKE_CXX_COMPILER_LOADED}")
# message(STATUS "CMAKE_CXX_COMPILER_PREDEFINES_COMMAND: ${CMAKE_CXX_COMPILER_PREDEFINES_COMMAND}")
# message(STATUS "CMAKE_CXX_COMPILER_TARGET: ${CMAKE_CXX_COMPILER_TARGET}")
# message(STATUS "CMAKE_CXX_COMPILER_VERSION: ${CMAKE_CXX_COMPILER_VERSION}")
# message(STATUS "CMAKE_CXX_COMPILE_OBJECT: ${CMAKE_CXX_COMPILE_OBJECT}")
# message(STATUS "CMAKE_CXX_CREATE_SHARED_LIBRARY: ${CMAKE_CXX_CREATE_SHARED_LIBRARY}")
# message(STATUS "CMAKE_CXX_CREATE_SHARED_MODULE: ${CMAKE_CXX_CREATE_SHARED_MODULE}")
# message(STATUS "CMAKE_CXX_CREATE_STATIC_LIBRARY: ${CMAKE_CXX_CREATE_STATIC_LIBRARY}")
# message(STATUS "CMAKE_CXX_FLAGS: ${CMAKE_CXX_FLAGS}")
# message(STATUS "CMAKE_CXX_FLAGS_DEBUG: ${CMAKE_CXX_FLAGS_DEBUG}")
# message(STATUS "CMAKE_CXX_FLAGS_DEBUG_INIT: ${CMAKE_CXX_FLAGS_DEBUG_INIT}")
# message(STATUS "CMAKE_CXX_FLAGS_INIT: ${CMAKE_CXX_FLAGS_INIT}")
# message(STATUS "CMAKE_CXX_FLAGS_MINSIZEREL: ${CMAKE_CXX_FLAGS_MINSIZEREL}")
# message(STATUS "CMAKE_CXX_FLAGS_MINSIZEREL_INIT: ${CMAKE_CXX_FLAGS_MINSIZEREL_INIT}")
# message(STATUS "CMAKE_CXX_FLAGS_RELEASE: ${CMAKE_CXX_FLAGS_RELEASE}")
# message(STATUS "CMAKE_CXX_FLAGS_RELEASE_INIT: ${CMAKE_CXX_FLAGS_RELEASE_INIT}")
# message(STATUS "CMAKE_CXX_FLAGS_RELWITHDEBINFO: ${CMAKE_CXX_FLAGS_RELWITHDEBINFO}")
# message(STATUS "CMAKE_CXX_FLAGS_RELWITHDEBINFO_INIT: ${CMAKE_CXX_FLAGS_RELWITHDEBINFO_INIT}")
# message(STATUS "CMAKE_CXX_IGNORE_EXTENSIONS: ${CMAKE_CXX_IGNORE_EXTENSIONS}")
# message(STATUS "CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES: ${CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES}")
# message(STATUS "CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES: ${CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES}")
# message(STATUS "CMAKE_CXX_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES: ${CMAKE_CXX_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES}")
# message(STATUS "CMAKE_CXX_IMPLICIT_LINK_LIBRARIES: ${CMAKE_CXX_IMPLICIT_LINK_LIBRARIES}")
# message(STATUS "CMAKE_CXX_LIBRARY_ARCHITECTURE: ${CMAKE_CXX_LIBRARY_ARCHITECTURE}")
# message(STATUS "CMAKE_CXX_LINK_EXECUTABLE: ${CMAKE_CXX_LINK_EXECUTABLE}")
# message(STATUS "CMAKE_CXX_LINKER_PREFERENCE: ${CMAKE_CXX_LINKER_PREFERENCE}")
# message(STATUS "CMAKE_CXX_LINKER_PREFERENCE_PROPAGATES: ${CMAKE_CXX_LINKER_PREFERENCE_PROPAGATES}")
# message(STATUS "CMAKE_CXX_LINKER_WRAPPER_FLAG: ${CMAKE_CXX_LINKER_WRAPPER_FLAG}")
# message(STATUS "CMAKE_CXX_LINKER_WRAPPER_FLAG_SEP: ${CMAKE_CXX_LINKER_WRAPPER_FLAG_SEP}")
# message(STATUS "CMAKE_CXX_OUTPUT_EXTENSION: ${CMAKE_CXX_OUTPUT_EXTENSION}")
# message(STATUS "CMAKE_CXX_SIMULATE_ID: ${CMAKE_CXX_SIMULATE_ID}")
# message(STATUS "CMAKE_CXX_SIMULATE_VERSION: ${CMAKE_CXX_SIMULATE_VERSION}")
# message(STATUS "CMAKE_CXX_SIZEOF_DATA_PTR: ${CMAKE_CXX_SIZEOF_DATA_PTR}")
# message(STATUS "CMAKE_CXX_SOURCE_FILE_EXTENSIONS: ${CMAKE_CXX_SOURCE_FILE_EXTENSIONS}")
# message(STATUS "CMAKE_CXX_STANDARD_INCLUDE_DIRECTORIES: ${CMAKE_CXX_STANDARD_INCLUDE_DIRECTORIES}")
# message(STATUS "CMAKE_CXX_STANDARD_LIBRARIES: ${CMAKE_CXX_STANDARD_LIBRARIES}")
# message(STATUS "CMAKE_USER_MAKE_RULES_OVERRIDE_CXX: ${CMAKE_USER_MAKE_RULES_OVERRIDE_CXX}")

# message(STATUS "CTEST_BINARY_DIRECTORY: ${CTEST_BINARY_DIRECTORY}")
# message(STATUS "CTEST_BUILD_COMMAND: ${CTEST_BUILD_COMMAND}")
# message(STATUS "CTEST_BUILD_NAME: ${CTEST_BUILD_NAME}")
# message(STATUS "CTEST_BZR_COMMAND: ${CTEST_BZR_COMMAND}")
# message(STATUS "CTEST_BZR_UPDATE_OPTIONS: ${CTEST_BZR_UPDATE_OPTIONS}")
# message(STATUS "CTEST_CHANGE_ID: ${CTEST_CHANGE_ID}")
# message(STATUS "CTEST_CHECKOUT_COMMAND: ${CTEST_CHECKOUT_COMMAND}")
# message(STATUS "CTEST_CONFIGURATION_TYPE: ${CTEST_CONFIGURATION_TYPE}")
# message(STATUS "CTEST_CONFIGURE_COMMAND: ${CTEST_CONFIGURE_COMMAND}")
# message(STATUS "CTEST_COVERAGE_COMMAND: ${CTEST_COVERAGE_COMMAND}")
# message(STATUS "CTEST_COVERAGE_EXTRA_FLAGS: ${CTEST_COVERAGE_EXTRA_FLAGS}")
# message(STATUS "CTEST_CURL_OPTIONS: ${CTEST_CURL_OPTIONS}")
# message(STATUS "CTEST_CUSTOM_COVERAGE_EXCLUDE: ${CTEST_CUSTOM_COVERAGE_EXCLUDE}")
# message(STATUS "CTEST_CUSTOM_ERROR_EXCEPTION: ${CTEST_CUSTOM_ERROR_EXCEPTION}")
# message(STATUS "CTEST_CUSTOM_ERROR_MATCH: ${CTEST_CUSTOM_ERROR_MATCH}")
# message(STATUS "CTEST_CUSTOM_ERROR_POST_CONTEXT: ${CTEST_CUSTOM_ERROR_POST_CONTEXT}")
# message(STATUS "CTEST_CUSTOM_ERROR_PRE_CONTEXT: ${CTEST_CUSTOM_ERROR_PRE_CONTEXT}")
# message(STATUS "CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE: ${CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE}")
# message(STATUS "CTEST_CUSTOM_MAXIMUM_NUMBER_OF_ERRORS: ${CTEST_CUSTOM_MAXIMUM_NUMBER_OF_ERRORS}")
# message(STATUS "CTEST_CUSTOM_MAXIMUM_NUMBER_OF_WARNINGS: ${CTEST_CUSTOM_MAXIMUM_NUMBER_OF_WARNINGS}")
# message(STATUS "CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE: ${CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE}")
# message(STATUS "CTEST_CUSTOM_MEMCHECK_IGNORE: ${CTEST_CUSTOM_MEMCHECK_IGNORE}")
# message(STATUS "CTEST_CUSTOM_POST_MEMCHECK: ${CTEST_CUSTOM_POST_MEMCHECK}")
# message(STATUS "CTEST_CUSTOM_POST_TEST: ${CTEST_CUSTOM_POST_TEST}")
# message(STATUS "CTEST_CUSTOM_PRE_MEMCHECK: ${CTEST_CUSTOM_PRE_MEMCHECK}")
# message(STATUS "CTEST_CUSTOM_PRE_TEST: ${CTEST_CUSTOM_PRE_TEST}")
# message(STATUS "CTEST_CUSTOM_TESTS_IGNORE: ${CTEST_CUSTOM_TESTS_IGNORE}")
# message(STATUS "CTEST_CUSTOM_WARNING_EXCEPTION: ${CTEST_CUSTOM_WARNING_EXCEPTION}")
# message(STATUS "CTEST_CUSTOM_WARNING_MATCH: ${CTEST_CUSTOM_WARNING_MATCH}")
# message(STATUS "CTEST_CVS_CHECKOUT: ${CTEST_CVS_CHECKOUT}")
# message(STATUS "CTEST_CVS_COMMAND: ${CTEST_CVS_COMMAND}")
# message(STATUS "CTEST_CVS_UPDATE_OPTIONS: ${CTEST_CVS_UPDATE_OPTIONS}")
# message(STATUS "CTEST_DROP_LOCATION: ${CTEST_DROP_LOCATION}")
# message(STATUS "CTEST_DROP_METHOD: ${CTEST_DROP_METHOD}")
# message(STATUS "CTEST_DROP_SITE: ${CTEST_DROP_SITE}")
# message(STATUS "CTEST_DROP_SITE_CDASH: ${CTEST_DROP_SITE_CDASH}")
# message(STATUS "CTEST_DROP_SITE_PASSWORD: ${CTEST_DROP_SITE_PASSWORD}")
# message(STATUS "CTEST_DROP_SITE_USER: ${CTEST_DROP_SITE_USER}")
# message(STATUS "CTEST_EXTRA_COVERAGE_GLOB: ${CTEST_EXTRA_COVERAGE_GLOB}")
# message(STATUS "CTEST_GIT_COMMAND: ${CTEST_GIT_COMMAND}")
# message(STATUS "CTEST_GIT_INIT_SUBMODULES: ${CTEST_GIT_INIT_SUBMODULES}")
# message(STATUS "CTEST_GIT_UPDATE_CUSTOM: ${CTEST_GIT_UPDATE_CUSTOM}")
# message(STATUS "CTEST_GIT_UPDATE_OPTIONS: ${CTEST_GIT_UPDATE_OPTIONS}")
# message(STATUS "CTEST_HG_COMMAND: ${CTEST_HG_COMMAND}")
# message(STATUS "CTEST_HG_UPDATE_OPTIONS: ${CTEST_HG_UPDATE_OPTIONS}")
# message(STATUS "CTEST_LABELS_FOR_SUBPROJECTS: ${CTEST_LABELS_FOR_SUBPROJECTS}")
# message(STATUS "CTEST_MEMORYCHECK_COMMAND: ${CTEST_MEMORYCHECK_COMMAND}")
# message(STATUS "CTEST_MEMORYCHECK_COMMAND_OPTIONS: ${CTEST_MEMORYCHECK_COMMAND_OPTIONS}")
# message(STATUS "CTEST_MEMORYCHECK_SANITIZER_OPTIONS: ${CTEST_MEMORYCHECK_SANITIZER_OPTIONS}")
# message(STATUS "CTEST_MEMORYCHECK_SUPPRESSIONS_FILE: ${CTEST_MEMORYCHECK_SUPPRESSIONS_FILE}")
# message(STATUS "CTEST_MEMORYCHECK_TYPE: ${CTEST_MEMORYCHECK_TYPE}")
# message(STATUS "CTEST_NIGHTLY_START_TIME: ${CTEST_NIGHTLY_START_TIME}")
# message(STATUS "CTEST_P4_CLIENT: ${CTEST_P4_CLIENT}")
# message(STATUS "CTEST_P4_COMMAND: ${CTEST_P4_COMMAND}")
# message(STATUS "CTEST_P4_OPTIONS: ${CTEST_P4_OPTIONS}")
# message(STATUS "CTEST_P4_UPDATE_OPTIONS: ${CTEST_P4_UPDATE_OPTIONS}")
# message(STATUS "CTEST_RESOURCE_SPEC_FILE: ${CTEST_RESOURCE_SPEC_FILE}")
# message(STATUS "CTEST_RUN_CURRENT_SCRIPT: ${CTEST_RUN_CURRENT_SCRIPT}")
# message(STATUS "CTEST_SCP_COMMAND: ${CTEST_SCP_COMMAND}")
# message(STATUS "CTEST_SITE: ${CTEST_SITE}")
# message(STATUS "CTEST_SUBMIT_URL: ${CTEST_SUBMIT_URL}")
# message(STATUS "CTEST_SOURCE_DIRECTORY: ${CTEST_SOURCE_DIRECTORY}")
# message(STATUS "CTEST_SVN_COMMAND: ${CTEST_SVN_COMMAND}")
# message(STATUS "CTEST_SVN_OPTIONS: ${CTEST_SVN_OPTIONS}")
# message(STATUS "CTEST_SVN_UPDATE_OPTIONS: ${CTEST_SVN_UPDATE_OPTIONS}")
# message(STATUS "CTEST_TEST_LOAD: ${CTEST_TEST_LOAD}")
# message(STATUS "CTEST_TEST_TIMEOUT: ${CTEST_TEST_TIMEOUT}")
# message(STATUS "CTEST_TRIGGER_SITE: ${CTEST_TRIGGER_SITE}")
# message(STATUS "CTEST_UPDATE_COMMAND: ${CTEST_UPDATE_COMMAND}")
# message(STATUS "CTEST_UPDATE_OPTIONS: ${CTEST_UPDATE_OPTIONS}")
# message(STATUS "CTEST_UPDATE_VERSION_ONLY: ${CTEST_UPDATE_VERSION_ONLY}")
# message(STATUS "CTEST_UPDATE_VERSION_OVERRIDE: ${CTEST_UPDATE_VERSION_OVERRIDE}")
# message(STATUS "CTEST_USE_LAUNCHERS: ${CTEST_USE_LAUNCHERS}")
# message(STATUS "CPACK_ABSOLUTE_DESTINATION_FILES: ${CPACK_ABSOLUTE_DESTINATION_FILES}")
# message(STATUS "CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY: ${CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY}")
# message(STATUS "CPACK_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION: ${CPACK_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION}")
# message(STATUS "CPACK_INCLUDE_TOPLEVEL_DIRECTORY: ${CPACK_INCLUDE_TOPLEVEL_DIRECTORY}")
# message(STATUS "CPACK_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS: ${CPACK_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS}")
# message(STATUS "CPACK_PACKAGING_INSTALL_PREFIX: ${CPACK_PACKAGING_INSTALL_PREFIX}")
# message(STATUS "CPACK_SET_DESTDIR: ${CPACK_SET_DESTDIR}")
# message(STATUS "CPACK_WARN_ON_ABSOLUTE_INSTALL_DESTINATION: ${CPACK_WARN_ON_ABSOLUTE_INSTALL_DESTINATION}")

# message(STATUS "CMAKE_HOME_DIRECTORY: ${CMAKE_HOME_DIRECTORY}")
# message(STATUS "CMAKE_INTERNAL_PLATFORM_ABI: ${CMAKE_INTERNAL_PLATFORM_ABI}")
# message(STATUS "CMAKE_CXX_COMPILER_ABI: ${CMAKE_CXX_COMPILER_ABI}")
# message(STATUS "CMAKE_CXX_COMPILER_ARCHITECTURE_ID: ${CMAKE_CXX_COMPILER_ARCHITECTURE_ID}")
# message(STATUS "CMAKE_CXX_COMPILER_VERSION_INTERNAL: ${CMAKE_CXX_COMPILER_VERSION_INTERNAL}")
# message(STATUS "CMAKE_CXX_PLATFORM_ID: ${CMAKE_CXX_PLATFORM_ID}")
# message(STATUS "CMAKE_NOT_USING_CONFIG_FLAGS: ${CMAKE_NOT_USING_CONFIG_FLAGS}")
# message(STATUS "CMAKE_VS_INTEL_Fortran_PROJECT_VERSIO: ${CMAKE_VS_INTEL_Fortran_PROJECT_VERSIO}")

# # Include necessary submodules
# set(CMAKE_MODULE_PATH
#   "${PROJECT_SOURCE_DIR}/CMake"
#   "${PROJECT_SOURCE_DIR}/CMake/Utils"
#   "${PROJECT_SOURCE_DIR}/CMake/Packages"
# )

# include(CMakeDependentOption)
# include(MacroLogFeature)
# include(OgreConfigTargets)
# set(OGRE_TEMPLATES_DIR "${PROJECT_SOURCE_DIR}/CMake/Templates")
# set(CAVE_ENGINE_WORK_DIR ${PROJECT_BINARY_DIR})


#####################################################################
# Set up the basic build environment
#####################################################################

# if (NOT CMAKE_BUILD_TYPE)
#   # CMake defaults to leaving CMAKE_BUILD_TYPE empty. This screws up
#   # differentiation between debug and release builds.
#   set(CMAKE_BUILD_TYPE "RelWithDebInfo" CACHE STRING "Choose the type of build, options are: None (CMAKE_CXX_FLAGS or CMAKE_C_FLAGS used) Debug Release RelWithDebInfo MinSizeRel." FORCE)
# endif ()

# determine Ogre version numbers
message(STATUS "Configuring CAVE_ENGINE ${CAVE_ENGINE_VERSION}")
# Configure version file for use by scripts
# configure_file("${CAVE_ENGINE_TEMPLATES_DIR}/version.txt.in" "${PROJECT_BINARY_DIR}/version.txt" @ONLY)
set(CAVE_BUILD_DEBUG 0)
set(CAVE_BUILD_DEVELOPMENT 0)
set(CAVE_BUILD_TEST 0)
set(CAVE_BUILD_RELEASE 0)

if(CMAKE_BUILD_TYPE MATCHES Debug)
	set(CAVE_BUILD_DEBUG 1)
elseif (CMAKE_BUILD_TYPE MATCHES RelWithDebInfo)
	set(CAVE_BUILD_DEVELOPMENT 1)
elseif(CMAKE_BUILD_TYPE MATCHES Release)
	set(CAVE_BUILD_TEST 1)
elseif (CMAKE_BUILD_TYPE MATCHES MinSizeRel)
	set(CAVE_BUILD_RELEASE 1)
endif()

set(CAPACITY_INCREASE_MODE_DOUBLE 0)
set(CAPACITY_INCREASE_MODE_SUFFICIENT 1)
set(CAPACITY_INCREASE_MODE CAPACITY_INCREASE_MODE_DOUBLE)

if (UNIX)
	configure_file(CaveEngineConfigUnix.h.in ${PROJECT_BINARY_DIR}/include/CaveEngineConfig.h)
elseif (WIN32)
	configure_file(CaveEngineConfigWin32.h.in ${PROJECT_BINARY_DIR}/include/CaveEngineConfig.h)
endif()

# determine if we are compiling for a 32bit or 64bit system
# include(CheckTypeSize)
# CHECK_TYPE_SIZE("void*" CAVE_ENGINE_PTR_SIZE BUILTIN_TYPES_ONLY)
# if (CAVE_ENGINE_PTR_SIZE EQUAL 8)
#   set(CAVE_ENGINE_PLATFORM_X64 TRUE)
# else ()
#   set(CAVE_ENGINE_PLATFORM_X64 FALSE)
# endif ()

# if (WIN32)
#   # Create debug libraries with _d postfix
#   set(CMAKE_DEBUG_POSTFIX "_d")
# endif ()

# Set compiler specific build flags
# if (NOT ANDROID AND NOT EMSCRIPTEN AND UNIX OR MINGW)
#   include(CheckCXXCompilerFlag)
#   check_cxx_compiler_flag(-msse CAVE_ENGINE_GCC_HAS_SSE)
#   if (CAVE_ENGINE_GCC_HAS_SSE)
#     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse")
#   endif ()
# endif()

# if(UNIX)
#   # This is a set of sensible warnings that provide meaningful output
#   set(OGRE_WARNING_FLAGS "-Wall -Winit-self -Wcast-qual -Wwrite-strings -Wextra -Wundef -Wmissing-declarations -Wno-unused-parameter -Wshadow -Wno-missing-field-initializers -Wno-long-long")
#   if (EMSCRIPTEN)
#       set(OGRE_WARNING_FLAGS "${OGRE_WARNING_FLAGS} -Wno-warn-absolute-paths")
#   endif ()
#   if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
#     set(OGRE_WARNING_FLAGS "${OGRE_WARNING_FLAGS} -Wno-inconsistent-missing-override -Wno-missing-braces")
#   endif()
#   set(CMAKE_CXX_FLAGS "${OGRE_WARNING_FLAGS} ${CMAKE_CXX_FLAGS}")
# endif ()
# if (MSVC)
#   add_definitions(-D_MT -D_USRDLL)
#   # MSVC does not like Ogre::Singleton (header pragma is enough for MSVC2015+ though)
#   add_definitions(/wd4661)
#   if (CMAKE_BUILD_TOOL STREQUAL "nmake")
#     # set variable to state that we are using nmake makefiles
# 	set(NMAKE TRUE)
#   endif ()
#   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /fp:fast")
#   # Enable intrinsics on MSVC in debug mode
#   set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /Oi")
#   if (CMAKE_CL_64)
#     # Visual Studio bails out on debug builds in 64bit mode unless
# 	# this flag is set...
# 	set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /bigobj")
# 	set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /bigobj")
#   endif ()

#   if (CAVE_ENGINE_PROJECT_FOLDERS)  
#     # Turn on the ability to create folders to organize projects (.vcproj)
#     # It creates "CMakePredefinedTargets" folder by default and adds CMake
#     # defined projects like INSTALL.vcproj and ZERO_CHECK.vcproj
#     set_property(GLOBAL PROPERTY USE_FOLDERS ON)
#   endif()

#   if (MSVC_VERSION GREATER 1500 OR MSVC_VERSION EQUAL 1500)
#     option(CAVE_ENGINE_BUILD_MSVC_MP "Enable build with multiple processes in Visual Studio" TRUE)
#   else()
#     set(CAVE_ENGINE_BUILD_MSVC_MP FALSE CACHE BOOL "Compiler option /MP requires at least Visual Studio 2008 (VS9) or newer" FORCE)
#   endif()
#   if(CAVE_ENGINE_BUILD_MSVC_MP)
#     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")
#   endif ()
#   if(MSVC_VERSION GREATER 1400 OR MSVC_VERSION EQUAL 1400)
#     option(CAVE_ENGINE_BUILD_MSVC_ZM "Add /Zm256 compiler option to Visual Studio to fix PCH errors" TRUE)
#   else()
#     set(CAVE_ENGINE_BUILD_MSVC_ZM FALSE CACHE BOOL "Compiler option /Zm256 requires at least Visual Studio 2005 (VS8) or newer" FORCE)
#   endif()
#   if(CAVE_ENGINE_BUILD_MSVC_ZM)
#     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /Zm256")
#   endif ()
# endif ()
# if (MINGW)
#   add_definitions(-D_WIN32_WINNT=0x0501)
#   if( CMAKE_SIZEOF_VOID_P EQUAL 4 )
#     # set architecture to i686, since otherwise some versions of MinGW can't link
#     # the atomic primitives
#     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=i686")
#   endif ()
#   # disable this optimisation because it breaks release builds (reason unknown)
#   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-tree-slp-vectorize")
#   # Ignore some really annoying warnings which also happen in dependencies
#   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-error=cast-qual -Wno-unused-local-typedefs")
# endif ()

# include(GenerateExportHeader)
# set(CMAKE_CXX_VISIBILITY_PRESET hidden)
# set(CMAKE_VISIBILITY_INLINES_HIDDEN TRUE)

# if((CMAKE_CXX_COMPILER_ID MATCHES "Clang|GNU") AND NOT CAVE_ENGINE_STATIC)
#   set(CAVE_ENGINE_VISIBILITY_FLAGS "-DCAVE_ENGINE_GCC_VISIBILITY") # for legacy headers
# endif()

# # determine system endianess
# if (MSVC OR ANDROID OR EMSCRIPTEN OR APPLE_IOS)
#   # This doesn't work on VS 2010
#  # MSVC only builds for intel anyway
#   # all IOS devices are little endian
#   set(CAVE_ENGINE_TEST_BIG_ENDIAN FALSE)
# else()
#   include(TestBigEndian)
#   test_big_endian(CAVE_ENGINE_TEST_BIG_ENDIAN)
# endif()

# definitions for samples
# set(CAVE_ENGINE_LIBRARIES CaveEngineMain)

# Specify build paths
# set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/lib")
# set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/lib")
# set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/bin")
# if (WIN32)
#   if (CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
#     # We don't want to install in default system location, install is really for the SDK, so call it that
#     set(CMAKE_INSTALL_PREFIX
# 	  "${PROJECT_BINARY_DIR}/sdk" CACHE PATH "CAVE_ENGINE install prefix" FORCE
#     )
#   endif (CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
# endif(WIN32)

# # Set up iOS overrides.
# if (APPLE_IOS)
#   set(CMAKE_EXE_LINKER_FLAGS "-framework OpenGLES -framework Foundation -framework CoreGraphics -framework QuartzCore -framework UIKit")
#   set(XCODE_ATTRIBUTE_GCC_UNROLL_LOOPS "YES")
#   set(XCODE_ATTRIBUTE_LLVM_VECTORIZE_LOOPS "YES")
#   set(XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY "iPhone Developer")
#   set(XCODE_ATTRIBUTE_GCC_PRECOMPILE_PREFIX_HEADER "YES")
#   set(OGRE_BUILD_RENDERSYSTEM_GLES2 TRUE CACHE BOOL "Forcing OpenGL ES 2 RenderSystem for iOS" FORCE)
#   set(OGRE_CONFIG_ENABLE_PVRTC TRUE CACHE BOOL "Forcing PVRTC codec for OpenGL ES" FORCE)
#   set(OGRE_STATIC TRUE CACHE BOOL "Forcing static build for iOS" FORCE)
#   set(MACOSX_BUNDLE_GUI_IDENTIFIER "com.yourcompany.\${PRODUCT_NAME:rfc1034identifier}")
# elseif (ANDROID)
#   set(TargetPlatform "Android")
#   set(OGRE_PLATFORM OGRE_PLATFORM_ANDROID)
#   set(OGRE_CONFIG_ENABLE_VIEWPORT_ORIENTATIONMODE FALSE CACHE BOOL "Disable viewport orientation Android" FORCE)
#   option(OGRE_BUILD_ANDROID_JNI_SAMPLE "Enable JNI Sample" FALSE)

#   set(OGRE_BUILD_RENDERSYSTEM_GLES2 TRUE CACHE BOOL "Forcing OpenGL ES 2 RenderSystem for Android" FORCE)
#   set(OGRE_CONFIG_ENABLE_PVRTC TRUE CACHE BOOL "Forcing PVRTC codec for OpenGL ES" FORCE)

#   set(OGRE_BUILD_PLUGIN_PCZ FALSE CACHE BOOL "Disable pcz on Android" FORCE)
#   set(OGRE_BUILD_TOOLS FALSE CACHE BOOL "Disable tools on Android" FORCE)
#   set(OGRE_STATIC TRUE CACHE BOOL "Forcing static build for Android" FORCE)

#   # workaround for the legacy android toolchain
#   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
# elseif(EMSCRIPTEN)
#   add_definitions(-DEMSCRIPTEN=1 -D__EMSCRIPTEN__=1)
#   set(TargetPlatform "Emscripten")
#   set(OGRE_PLATFORM OGRE_PLATFORM_EMSCRIPTEN)

#   set(OGRE_BUILD_RENDERSYSTEM_GLES2 TRUE CACHE BOOL "Forcing OpenGL ES 2 RenderSystem for Emscripten" FORCE)
#   set(OGRE_BUILD_RENDERSYSTEM_GL FALSE CACHE BOOL "Disable OpenGL RenderSystem for Emscripten" FORCE)

#   set(OGRE_BUILD_PLUGIN_STBI TRUE CACHE BOOL "Enable STBIImageCodec on Emscripten (Smaller Footprint)" FORCE)
#   set(OGRE_BUILD_PLUGIN_FREEIMAGE FALSE CACHE BOOL "Disable Freeimage on Emscripten (Smaller Footprint)" FORCE)
#   set(OGRE_BUILD_PLUGIN_PCZ FALSE CACHE BOOL "Disable pcz on Emscripten" FORCE)
#   set(OGRE_BUILD_PLUGIN_BSP FALSE CACHE BOOL "Disable pcz on Emscripten" FORCE)
#   set(OGRE_BUILD_TOOLS FALSE CACHE BOOL "Disable tools on Emscripten" FORCE)
#   set(OGRE_BUILD_TESTS FALSE CACHE BOOL "Disable tests on Emscripten" FORCE)
#   set(OGRE_BUILD_COMPONENT_VOLUME FALSE CACHE BOOL "Disable volume component on Emscripten" FORCE)
#   set(OGRE_BUILD_COMPONENT_PAGING FALSE CACHE BOOL "Disable paging component on Emscripten" FORCE)
#   set(OGRE_BUILD_COMPONENT_TERRAIN FALSE CACHE BOOL "Disable terrain component on Emscripten" FORCE)
#   set(OGRE_STATIC TRUE CACHE BOOL "Forcing static build for Emscripten" FORCE)

#   set(OGRE_CONFIG_THREADS "0" CACHE STRING "Threading is unstable on Emscripten" FORCE)
# elseif (APPLE AND NOT APPLE_IOS)

#   set(XCODE_ATTRIBUTE_SDKROOT macosx)
#   if(CMAKE_GENERATOR STREQUAL "Unix Makefiles")
#     execute_process(COMMAND xcodebuild -version -sdk "${XCODE_ATTRIBUTE_SDKROOT}" Path | head -n 1 OUTPUT_VARIABLE CMAKE_OSX_SYSROOT)
#     string(REGEX REPLACE "(\r?\n)+$" "" CMAKE_OSX_SYSROOT "${CMAKE_OSX_SYSROOT}")
#   else()
#     set(CMAKE_OSX_SYSROOT macosx)
#   endif()

#   # Make sure that the GLES2 render system is disabled for non-iOS Apple builds
#   set(OGRE_BUILD_RENDERSYSTEM_GLES2 FALSE CACHE BOOL "" FORCE)
# endif ()

# if(OGRE_BUILD_COMPONENT_MESHLODGENERATOR)
#   set(OGRE_CONFIG_ENABLE_MESHLOD TRUE CACHE BOOL "Forcing Mesh Lod" FORCE)
# endif()

# # Find dependencies
# include(Dependencies)

# ######################################################################
# # Provide user options to customise the build process
# ######################################################################

# # Customise what to build
# option(OGRE_STATIC "Static build" FALSE)
# cmake_dependent_option(OGRE_ENABLE_PRECOMPILED_HEADERS "Use precompiled headers to speed up build" TRUE "NOT MINGW; NOT EMSCRIPTEN" FALSE)
# set(OGRE_RESOURCEMANAGER_STRICT "2" CACHE STRING 
#   "Make ResourceManager strict for faster operation. Possible values:
#   0 - OFF search in all groups twice - for case sensitive and insensitive lookup [DEPRECATED]
#   1 - PEDANTIC require an explicit resource group. Case sensitive lookup.
#   2 - STRICT search in default group if not specified otherwise. Case sensitive lookup.
#   ")
# set_property(CACHE OGRE_RESOURCEMANAGER_STRICT PROPERTY STRINGS 0 1 2)

# option(OGRE_NODELESS_POSITIONING "use Lights and Cameras without attaching them to nodes [DEPRECATED]" TRUE)

# cmake_dependent_option(OGRE_BUILD_RENDERSYSTEM_D3D9 "Build Direct3D9 RenderSystem" TRUE "WIN32;DirectX9_FOUND;NOT WINDOWS_STORE;NOT WINDOWS_PHONE" FALSE)
# cmake_dependent_option(OGRE_BUILD_RENDERSYSTEM_D3D11 "Build Direct3D11 RenderSystem" TRUE "WIN32;DirectX11_FOUND OR WINDOWS_STORE OR WINDOWS_PHONE" FALSE)
# cmake_dependent_option(OGRE_BUILD_RENDERSYSTEM_GL3PLUS "Build OpenGL 3+ RenderSystem" TRUE "OPENGL_FOUND;NOT WINDOWS_STORE;NOT WINDOWS_PHONE" FALSE)
# cmake_dependent_option(OGRE_BUILD_RENDERSYSTEM_GL "Build OpenGL RenderSystem" TRUE "OPENGL_FOUND;NOT APPLE_IOS;NOT WINDOWS_STORE;NOT WINDOWS_PHONE" FALSE)
# cmake_dependent_option(OGRE_BUILD_RENDERSYSTEM_GLES2 "Build OpenGL ES 2.x RenderSystem" TRUE "OPENGLES2_FOUND;NOT WINDOWS_STORE;NOT WINDOWS_PHONE" FALSE)
# cmake_dependent_option(OGRE_BUILD_RENDERSYSTEM_METAL "Build Metal RenderSystem" FALSE "APPLE" FALSE)
# cmake_dependent_option(OGRE_BUILD_PLUGIN_ASSIMP "Build Open Asset Import plugin" TRUE "ASSIMP_FOUND" FALSE)
# cmake_dependent_option(OGRE_BUILD_RENDERSYSTEM_TINY "Build Tiny RenderSystem (software-rendering)" FALSE "NOT ANDROID" FALSE)
# option(OGRE_BUILD_PLUGIN_BSP "Build BSP SceneManager plugin" TRUE)
# option(OGRE_BUILD_PLUGIN_OCTREE "Build Octree SceneManager plugin" TRUE)
# option(OGRE_BUILD_PLUGIN_PFX "Build ParticleFX plugin" TRUE)
# option(OGRE_BUILD_PLUGIN_DOT_SCENE "Build .scene plugin" TRUE)
# cmake_dependent_option(OGRE_BUILD_PLUGIN_PCZ "Build PCZ SceneManager plugin" TRUE "" FALSE)
# cmake_dependent_option(OGRE_BUILD_COMPONENT_PAGING "Build Paging component" TRUE "" FALSE)
# cmake_dependent_option(OGRE_BUILD_COMPONENT_MESHLODGENERATOR "Build MeshLodGenerator component" TRUE "" FALSE)
# cmake_dependent_option(OGRE_BUILD_COMPONENT_TERRAIN "Build Terrain component" TRUE "" FALSE)
# cmake_dependent_option(OGRE_BUILD_COMPONENT_VOLUME "Build Volume component" TRUE "" FALSE)
# cmake_dependent_option(OGRE_BUILD_COMPONENT_PROPERTY "Build Property component" TRUE "" FALSE)
# cmake_dependent_option(OGRE_BUILD_PLUGIN_CG "Build Cg plugin" TRUE "Cg_FOUND;NOT APPLE_IOS;NOT WINDOWS_STORE;NOT WINDOWS_PHONE" FALSE)
# cmake_dependent_option(OGRE_BUILD_COMPONENT_OVERLAY "Build Overlay component" TRUE "FREETYPE_FOUND" FALSE)

# cmake_dependent_option(OGRE_BUILD_COMPONENT_OVERLAY_IMGUI "Include dear imgui in Overlays" TRUE "OGRE_BUILD_COMPONENT_OVERLAY" FALSE)

# option(OGRE_BUILD_COMPONENT_HLMS "Build HLMS component" FALSE)
# cmake_dependent_option(OGRE_BUILD_COMPONENT_BITES "Build OgreBites component" TRUE "OGRE_BUILD_COMPONENT_OVERLAY" FALSE)
# cmake_dependent_option(OGRE_BITES_STATIC_PLUGINS "Skip plugins.cfg and statically load plugins via OgreBites" FALSE "NOT OGRE_STATIC;OGRE_BUILD_COMPONENT_BITES" FALSE)
# cmake_dependent_option(OGRE_BUILD_COMPONENT_PYTHON "Build Python bindings" TRUE "NOT OGRE_STATIC" FALSE)
# cmake_dependent_option(OGRE_BUILD_COMPONENT_JAVA "Build Java (JNI) bindings" TRUE "NOT OGRE_STATIC OR ANDROID" FALSE)
# cmake_dependent_option(OGRE_BUILD_COMPONENT_CSHARP "Build Csharp bindings" TRUE "NOT OGRE_STATIC" FALSE)
# option(OGRE_BUILD_COMPONENT_RTSHADERSYSTEM "Build RTShader System component" TRUE)
# cmake_dependent_option(OGRE_BUILD_RTSHADERSYSTEM_SHADERS "Build RTShader System FFP shaders" TRUE "OGRE_BUILD_COMPONENT_RTSHADERSYSTEM" FALSE)

# cmake_dependent_option(OGRE_BUILD_SAMPLES "Build Ogre demos" TRUE "OGRE_BUILD_COMPONENT_OVERLAY;OGRE_BUILD_COMPONENT_BITES" FALSE)
# cmake_dependent_option(OGRE_BUILD_TOOLS "Build the command-line tools" TRUE "NOT APPLE_IOS;NOT WINDOWS_STORE;NOT WINDOWS_PHONE" FALSE)
# cmake_dependent_option(OGRE_BUILD_XSIEXPORTER "Build the Softimage exporter" FALSE "Softimage_FOUND" FALSE)
# cmake_dependent_option(OGRE_BUILD_LIBS_AS_FRAMEWORKS "Build frameworks for libraries on OS X." TRUE "APPLE;NOT OGRE_BUILD_PLATFORM_APPLE_IOS" FALSE)
# cmake_dependent_option(OGRE_BUILD_TESTS "Build the unit tests & PlayPen" FALSE "OGRE_BUILD_COMPONENT_BITES" FALSE)
# option(OGRE_CONFIG_DOUBLE "Use doubles instead of floats in Ogre" FALSE)
# option(OGRE_CONFIG_NODE_INHERIT_TRANSFORM "Tells the node whether it should inherit full transform from it's parent node or derived position, orientation and scale" FALSE)
# set(OGRE_CONFIG_THREADS "3" CACHE STRING 
# 	"Enable Ogre thread safety support for multithreading. Possible values:
# 	0 - no thread safety. DefaultWorkQueue is not threaded.
# 	1 - background resource preparation and loading is thread safe. Threaded DefaultWorkQueue. [DEPRECATED]
# 	2 - only background resource preparation is thread safe. Threaded DefaultWorkQueue. [DEPRECATED]
# 	3 - no thread safety. Threaded DefaultWorkQueue."
# )
# set_property(CACHE OGRE_CONFIG_THREADS PROPERTY STRINGS 0 1 2 3)
# set(OGRE_CONFIG_THREAD_PROVIDER "std" CACHE STRING
# 	"Select the library to use for thread support. Possible values:
# 	boost - Boost thread library. [DEPRECATED]
# 	poco  - Poco thread library. [DEPRECATED]
# 	tbb   - ThreadingBuildingBlocks library. [DEPRECATED]
# 	std   - STL thread library (requires compiler support)."
# )
# set_property(CACHE OGRE_CONFIG_THREAD_PROVIDER PROPERTY STRINGS boost poco tbb std)
# cmake_dependent_option(OGRE_BUILD_PLUGIN_FREEIMAGE "Build FreeImage codec." TRUE "FreeImage_FOUND" FALSE)
# cmake_dependent_option(OGRE_BUILD_PLUGIN_EXRCODEC "Build EXR Codec plugin" TRUE "OPENEXR_FOUND;" FALSE)
# option(OGRE_BUILD_PLUGIN_STBI "Enable STBI image codec." TRUE)
# option(OGRE_CONFIG_ENABLE_MESHLOD "Enable Mesh Lod." TRUE)
# option(OGRE_CONFIG_ENABLE_DDS "Build DDS codec." TRUE)
# option(OGRE_CONFIG_ENABLE_PVRTC "Build PVRTC codec." FALSE)
# option(OGRE_CONFIG_ENABLE_ETC "Build ETC codec." TRUE)
# option(OGRE_CONFIG_ENABLE_ASTC "Build ASTC codec." TRUE)
# option(OGRE_CONFIG_ENABLE_QUAD_BUFFER_STEREO "Enable stereoscopic 3D support" FALSE)
# cmake_dependent_option(OGRE_CONFIG_ENABLE_ZIP "Build ZIP archive support. If you disable this option, you cannot use ZIP archives resource locations. The samples won't work." TRUE "ZZip_FOUND" FALSE)
# option(OGRE_CONFIG_ENABLE_VIEWPORT_ORIENTATIONMODE "Include Viewport orientation mode support." FALSE)
# cmake_dependent_option(OGRE_CONFIG_ENABLE_GLES2_CG_SUPPORT "Enable Cg support to ES 2 render system" FALSE "OGRE_BUILD_RENDERSYSTEM_GLES2" FALSE)
# cmake_dependent_option(OGRE_CONFIG_ENABLE_GLES2_GLSL_OPTIMISER "Enable GLSL optimiser use in GLES 2 render system" FALSE "OGRE_BUILD_RENDERSYSTEM_GLES2" FALSE)
# cmake_dependent_option(OGRE_CONFIG_ENABLE_GL_STATE_CACHE_SUPPORT "Enable OpenGL state cache management" FALSE "OGRE_BUILD_RENDERSYSTEM_GL OR OGRE_BUILD_RENDERSYSTEM_GLES2 OR OGRE_BUILD_RENDERSYSTEM_GL3PLUS" FALSE)
# option(OGRE_CONFIG_ENABLE_TBB_SCHEDULER "Enable TBB's scheduler initialisation/shutdown." TRUE)
# cmake_dependent_option(OGRE_CONFIG_FILESYSTEM_UNICODE "paths expected to be in UTF-8 and wchar_t file IO routines are used" TRUE "MSVC" FALSE)
# # Customise what to install
# option(OGRE_INSTALL_CMAKE "Install CMake scripts." TRUE)
# cmake_dependent_option(OGRE_INSTALL_SAMPLES "Install Ogre demos." TRUE "OGRE_BUILD_SAMPLES" FALSE)
# option(OGRE_INSTALL_TOOLS "Install Ogre tools." TRUE)
# option(OGRE_INSTALL_DOCS "Install documentation." TRUE)
# cmake_dependent_option(OGRE_INSTALL_SAMPLES_SOURCE "Install samples source files." FALSE "OGRE_BUILD_SAMPLES" FALSE)
# cmake_dependent_option(OGRE_INSTALL_PDB "Install debug pdb files" TRUE "MSVC" FALSE)
# option(OGRE_PROFILING "Enable internal instrumentation." FALSE)
# set(OGRE_PROFILING_REMOTERY_PATH "" CACHE PATH "set this to Remotery/lib to use Remotery instead of the buildin profiler")
# cmake_dependent_option(OGRE_CONFIG_STATIC_LINK_CRT "Statically link the MS CRT dlls (msvcrt)" FALSE "MSVC" FALSE)
# set(OGRE_LIB_DIRECTORY "lib${LIB_SUFFIX}" CACHE STRING "Install path for libraries, e.g. 'lib64' on some 64-bit Linux distros.")
# if (WIN32)
# 	option(OGRE_INSTALL_VSPROPS "Install Visual Studio Property Page." FALSE)
# 	if (OGRE_INSTALL_VSPROPS)
# 		configure_file(${OGRE_TEMPLATES_DIR}/OGRE.props.in ${PROJECT_BINARY_DIR}/OGRE.props)
# 		install(FILES ${PROJECT_BINARY_DIR}/OGRE.props DESTINATION "${CMAKE_INSTALL_PREFIX}")
# 	endif ()
# endif ()

# # determine threading options
# include(PrepareThreadingOptions)

# # Enable project folders by default if the IDE supportes them
# # Hide option from other compilers.
# if (MSVC OR CMAKE_GENERATOR MATCHES Xcode)
# 	option(OGRE_PROJECT_FOLDERS "Organize project into project folders." TRUE)
# endif ()

# # hide advanced options
# mark_as_advanced(
#   OGRE_BUILD_RTSHADERSYSTEM_CORE_SHADERS
#   OGRE_BUILD_RTSHADERSYSTEM_EXT_SHADERS
#   OGRE_CONFIG_DOUBLE
#   OGRE_CONFIG_NODE_INHERIT_TRANSFORM
#   OGRE_CONFIG_ENABLE_MESHLOD
#   OGRE_CONFIG_ENABLE_DDS
#   OGRE_CONFIG_ENABLE_PVRTC
#   OGRE_CONFIG_ENABLE_ETC
#   OGRE_CONFIG_ENABLE_ASTC
#   OGRE_CONFIG_ENABLE_VIEWPORT_ORIENTATIONMODE
#   OGRE_CONFIG_ENABLE_ZIP
#   OGRE_CONFIG_ENABLE_GL_STATE_CACHE_SUPPORT
#   OGRE_CONFIG_ENABLE_GLES2_CG_SUPPORT
#   OGRE_CONFIG_ENABLE_GLES2_GLSL_OPTIMISER
#   OGRE_CONFIG_ENABLE_TBB_SCHEDULER
#   OGRE_INSTALL_SAMPLES_SOURCE
#   OGRE_PROFILING
#   OGRE_CONFIG_STATIC_LINK_CRT
#   OGRE_LIB_DIRECTORY
# )

# ###################################################################
# # configure global build settings based on selected build options
# ###################################################################
# include(ConfigureBuild)

# set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_RPATH};${CMAKE_INSTALL_PREFIX}/${OGRE_LIB_DIRECTORY}")
# set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

# ###################################################################
# # disable way too common compiler warnings on project level
# ###################################################################
# if(MSVC)
# 	add_definitions( /wd4251 /wd4275 )
# endif()

##################################################################
# Now setup targets
##################################################################

# # install resource files
# include(InstallResources)

# # enable PCH support
# include(PrecompiledHeader)

# Setup Engine
add_subdirectory(CaveEngine)

# Setup Editor
add_subdirectory(CaveEditor)

# # Setup RenderSystems
# add_subdirectory(RenderSystems)

# # Setup Plugins
# add_subdirectory(PlugIns)

# # Setup Components
# add_subdirectory(Components)

# Setup tests (before samples so that PlayPen is included in browser)
if (CAVE_ENGINE_BUILD_TESTS)
  # enable CTest
  ENABLE_TESTING()
  INCLUDE(CTest)
  add_subdirectory(Tests)
endif ()

# Setup samples
add_subdirectory(CaveSample)

# # Setup command-line tools
# if (OGRE_BUILD_TOOLS)
#   add_subdirectory(Tools)
# endif ()

# # Setup XSIExporter
# if (OGRE_BUILD_XSIEXPORTER)
#   add_subdirectory(Tools/XSIExport)
# endif ()

# # Install documentation
# add_subdirectory(Docs)

# # Install sample media files
# install(DIRECTORY Media/ShadowVolume DESTINATION "${OGRE_MEDIA_PATH}/")
# install(DIRECTORY Media/RTShaderLib DESTINATION "${OGRE_MEDIA_PATH}/")
# if (OGRE_INSTALL_SAMPLES OR OGRE_INSTALL_SAMPLES_SOURCE)
#   install(DIRECTORY Samples/Media/ DESTINATION ${OGRE_MEDIA_PATH})
# endif ()

# # Install CMake modules
# if (CAVE_ENGINE_INSTALL_CMAKE)
#   add_subdirectory(CMake)
# endif ()

# Provide CPack packaging target
# include(Packaging)


# # Show feature summary
# include(FeatureSummary)